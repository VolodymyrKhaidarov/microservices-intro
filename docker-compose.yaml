version: '3'

services:
  # discovery and routing services
  eureka-service-registry:
    build: './eureka-service-registry'
    image: 'eureka-service-registry:1.0.0'
    ports:
      - '8761:8761'
    env_file:
      - 'config/eureka.env'

  gateway-service:
    build: './gateway-service'
    image: 'gateway-service:1.0.0'
    depends_on:
      - 'eureka-service-registry'
    ports:
      - '8080:8080'
    env_file:
      - 'config/gateway.env'

  # application services
  resource-service:
    build: './resource-service'
    image: 'resource-service:1.0.0'
    depends_on:
      - 'resource-db'
      - 'eureka-service-registry'
      - 'gateway-service'
    ports:
      - '8081:8080'
    env_file:
      - 'config/resource.env'

  song-service:
    build: './song-service'
    image: 'song-service:1.0.0'
    depends_on:
      - 'song-db'
      - 'eureka-service-registry'
      - 'gateway-service'
    ports:
      - '8082:8080'
    env_file:
      - 'config/song.env'

  resource-processor:
    build: './resource-processor'
    image: 'resource-processor:1.0.0'
    depends_on:
      - 'storage-db'
      - 'eureka-service-registry'
      - 'gateway-service'
    ports:
      - '8083:8080'
    env_file:
      - 'config/processor.env'

  storage-service:
    build: './storage-service'
    image: 'storage-service:1.0.0'
    depends_on:
      - 'eureka-service-registry'
      - 'gateway-service'
    ports:
      - '8084:8080'
    env_file:
      - 'config/storage.env'

  # async messaging
  async-zookeeper:
    image: 'wurstmeister/zookeeper'
    ports:
      - "2181:2181"

  async-kafka:
    image: 'wurstmeister/kafka'
    ports:
      - "9092-9093:9092-9093"
    env_file:
      - 'config/async.env'

  # aws for S3 storage
  aws-localstack:
    image: 'localstack/localstack'
    ports:
      - '4566:4566'
      - '4510-4559:4510-4559'
    volumes:
      - './config/script/aws.sh:/etc/localstack/init/ready.d/aws.sh'
      - '${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack'
      - '/var/run/docker.sock:/var/run/docker.sock'

  # postgres databases
  resource-db:
    image: 'postgres:16.1'
    ports:
      - '5433:5432'
    env_file:
      - 'config/resource.env'
    volumes:
      - './config/script/resource.sql:/docker-entrypoint-initdb.d/resource.sql'

  song-db:
    image: 'postgres:16.1'
    ports:
      - '5434:5432'
    env_file:
      - 'config/song.env'
    volumes:
      - './config/script/song.sql:/docker-entrypoint-initdb.d/song.sql'

  storage-db:
    image: 'postgres:16.1'
    ports:
      - '5435:5432'
    env_file:
      - 'config/storage.env'
    volumes:
      - './config/script/storage.sql:/docker-entrypoint-initdb.d/storage.sql'

  #monitoring
  prometheus:
    image: 'prom/prometheus'
    ports:
      - "9090:9090"
    restart: 'unless-stopped'
    volumes:
      - './config/prometheus:/etc/prometheus'
    command: '--web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: 'grafana/grafana'
    ports:
      - "3000:3000"
    env_file:
      - 'config/grafana/grafana.env'
    restart: 'unless-stopped'
    volumes:
      - './config/grafana:/etc/grafana/provisioning/datasources'

  zipkin:
    image: 'openzipkin/zipkin'
    ports:
      - '9411:9411'

  #security
  keycloak:
    image: 'keycloak/keycloak'
    ports:
      - '8085:8080'
    env_file:
          - 'config/keycloak.env'
    command: 'start-dev'



